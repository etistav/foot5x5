<?php

namespace foot5x5\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * RankingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RankingRepository extends EntityRepository
{
	/**
	 * Suppression de tous les éléments d'un classement
	 */
	public function clearStanding(Standing $standing) {
		$qb = $this->getEntityManager()->createQueryBuilder();
        $qb->delete('foot5x5MainBundle:Ranking', 'rnk')
            ->where('rnk.standing = :std')
            ->setParameter('std', $standing);
        $qb->getQuery()->execute();
	}

	/**
	 * Récupération de tous les éléments d'un classement
	 */
	public function findByStanding(Standing $standing) {
		$qb = $this->createQueryBuilder('rnk');
        $qb->where('rnk.standing = :std')
            ->setParameter('std', $standing)
            ->addOrderBy('rnk.eval', 'DESC')
            ->addOrderBy('rnk.points', 'DESC')
            ->addOrderBy('rnk.goalsDiff', 'DESC');

        return $qb->getQuery()->getResult();
	}

	/**
	 * Recherche du nb de joueurs classés pour un classement
	 */
	public function howManyPlayersInStanding(Standing $standing) {
		$qb = $this->createQueryBuilder('rnk');
        $qb->where('rnk.standing = :std')
            ->setParameter('std', $standing);

        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return 0;
		}
        return count($rankings);
	}

	/**
	 * Recherche du rang d'un joueur dans un classement
	 */
	public function findRankInStanding(Standing $standing, Player $player) {
		$qb = $this->createQueryBuilder('rnk');

        $qb->where('rnk.standing = :std')
            ->andWhere('rnk.player = :plr')
            ->setParameter('std', $standing)
            ->setParameter('plr', $player);

        try {
			$ranking = $qb->getQuery()->getSingleResult();
		} catch (NoResultException $e) {
			return "Non classé";
		}
        
        $rank = $ranking->getRank();
        if ($rank == '1') {
        	$rank .= "er";
        } else {
        	$rank .= "ème";
        }
        return $rank;
	}

	/**
	 * Recherche des classements d'un joueur pour chaque période
	 */
	public function getAllRankings(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std');
        $qb->where('rnk.player = :plr')
        	->andWhere('std.trimester > 0')
            ->setParameter('plr', $player)
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

    	try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return null;
		}
		return $rankings;
	}

	/**
	 * Recherche du meilleur classement d'un joueur
	 */
	public function findBestRankEver(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :plr')
        	->andWhere('std.trimester > 0')
            ->setParameter('plr', $player)
            ->addOrderBy('rnk.rank', 'ASC')
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return "Aucun";
		}
        
        $bestRank = "Aucun";
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = "T0".$ranking->getStanding()->getTrimester()." ".$ranking->getStanding()->getYear();
            if ($firstResult) {
                $firstResult = false;
                $bestRank = $ranking->getRank();
                $bestRankNum = $bestRank;
		        if ($bestRank == "1") {
		        	$bestRank .= "er";
		        } else {
		        	$bestRank .= "ème";
		        }
		        $bestRank .= " (".$standing;
		        if (count($rankings) == 1) {
		        	$bestRank .= ")";
		        }
            } else {
            	if ($ranking->getRank() == $bestRankNum) {
            		$bestRank .= " / ".$standing;
            	} else {
            		$bestRank .= ")";
					break;
            	}
            }
		}
        return $bestRank;
	}

	/**
	 * Recherche du pire classement d'un joueur
	 */
	public function findWorstRankEver(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :plr')
        	->andWhere('std.trimester > 0')
            ->setParameter('plr', $player)
            ->addOrderBy('rnk.rank', 'DESC')
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return "Aucun";
		}
        
        $worstRank = "Aucun";
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = "T0".$ranking->getStanding()->getTrimester()." ".$ranking->getStanding()->getYear();
            if ($firstResult) {
                $firstResult = false;
                $worstRank = $ranking->getRank();
                $worstRankNum = $worstRank;
		        if ($worstRank == "1") {
		        	$worstRank .= "er";
		        } else {
		        	$worstRank .= "ème";
		        }
		        $worstRank .= " (".$standing;
		        if (count($rankings) == 1) {
		        	$worstRank .= ")";
		        }
            } else {
            	if ($ranking->getRank() == $worstRankNum) {
            		$worstRank .= " / ".$standing;
            	} else {
            		$worstRank .= ")";
					break;
            	}
            }
		}
        return $worstRank;
	}

	/**
	 * Nb de titres de champion pour un joueur
	 */
	public function howManyTitlesForPlayer(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :player')
        	->andWhere('rnk.rank = :rank')
        	->andWhere('std.trimester > 0')
            ->setParameter('player', $player)
            ->setParameter('rank', 1)
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

    	$nbTitles = 0;
        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return $nbTitles;
		}
        
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = $ranking->getStanding();
			$standingTrim = "T0".$standing->getTrimester()." ".$standing->getYear();
			$nbTitles += 1;
            if ($firstResult) {
                $firstResult = false;
		        $titles = " (".$standingTrim;
            } else {
            	$titles .= " / ".$standingTrim;
            }
		}
		if ($nbTitles > 0) {
			$titles .= ")";
        	return $nbTitles." fois ".$titles;
        } else {
        	return $nbTitles." fois";
        }
	}

	/**
	 * Nb de podiums pour un joueur
	 */
	public function howManyPodiumsForPlayer(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :player')
        	->andWhere('rnk.rank <= :rank')
        	->andWhere('std.trimester > 0')
            ->setParameter('player', $player)
            ->setParameter('rank', 3)
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

    	$nbPodiums = 0;
        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return $nbPodiums;
		}
        
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = $ranking->getStanding();
			$standingTrim = "T0".$standing->getTrimester()." ".$standing->getYear();
			$nbPodiums += 1;
            if ($firstResult) {
                $firstResult = false;
		        $podiums = " (".$standingTrim;
            } else {
            	$podiums .= " / ".$standingTrim;
            }
		}
		if ($nbPodiums > 0) {
			$podiums .= ")";
        	return $nbPodiums." fois ".$podiums;
        } else {
        	return $nbPodiums." fois";
        }
	}

	/**
	 * Nb de relégations pour un joueur
	 */
	public function howManyRelegationsForPlayer(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :player')
        	->andWhere('rnk.rank >= :rank')
        	->andWhere('std.trimester > 0')
            ->setParameter('player', $player)
            ->setParameter('rank', 4)
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

    	$nbRelegations = 0;
        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return $nbRelegations;
		}
        
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = $ranking->getStanding();
			$standingTrim = "T0".$standing->getTrimester()." ".$standing->getYear();
			$nbPlayersStanding = $this->howManyPlayersInStanding($standing);
			if (($nbPlayersStanding - $ranking->getRank()) < 3) {
				$nbRelegations += 1;
	            if ($firstResult) {
	                $firstResult = false;
			        $relegations = " (".$standingTrim;
	            } else {
	            	$relegations .= " / ".$standingTrim;
	            }
	        }
		}
		if ($nbRelegations > 0) {
			$relegations .= ")";
        	return $nbRelegations." fois ".$relegations;
        } else {
        	return $nbRelegations." fois";
        }
	}

	/**
	 * Nb de fois lanterne rouge pour un joueur
	 */
	public function howManyTimesLastForPlayer(Player $player) {
		$qb = $this->createQueryBuilder('rnk')
            ->Join('rnk.standing', 'std')
            ->addSelect('std');
        $qb->where('rnk.player = :player')
        	->andWhere('rnk.rank >= :rank')
        	->andWhere('std.trimester > 0')
            ->setParameter('player', $player)
            ->setParameter('rank', 4)
            ->addOrderBy('std.year', 'DESC')
    		->addOrderBy('std.trimester', 'DESC');

    	$nbTimesLast = 0;
        try {
			$rankings = $qb->getQuery()->getResult();
		} catch (NoResultException $e) {
			return $nbTimesLast;
		}
        
        $firstResult = true;
		foreach ($rankings as $ranking) {
			$standing = $ranking->getStanding();
			$standingTrim = "T0".$standing->getTrimester()." ".$standing->getYear();
			$nbPlayersStanding = $this->howManyPlayersInStanding($standing);
            if ($nbPlayersStanding == $ranking->getRank()) {
				$nbTimesLast += 1;
	            if ($firstResult) {
	                $firstResult = false;
			        $timesLast = " (".$standingTrim;
	            } else {
	            	$timesLast .= " / ".$standingTrim;
	            }
	        }
		}
		if ($nbTimesLast > 0) {
			$timesLast .= ")";
        	return $nbTimesLast." fois ".$timesLast;
        } else {
        	return $nbTimesLast." fois";
        }
	}
}
