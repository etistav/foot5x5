<?php

namespace foot5x5\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Validator\Constraints\Null;

/**
 * ResultRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResultRepository extends EntityRepository
{
    public function findLastMatch($communityId) {
		$qb = $this->createQueryBuilder('res');
		$qb->where('res.community = :cmnId')
			->setParameter('cmnId', $communityId)
			->addOrderBy('res.year', 'DESC')
			->addOrderBy('res.trimester', 'DESC')
			->addOrderBy('res.num', 'DESC')
			->setMaxResults(1);
		try {
			$lastMatch = $qb->getQuery()->getSingleResult();
		} catch (NoResultException $e) {
			return null;
		}
		return $lastMatch;
    }

    public function findByTrimester($year, $trimester) {
    	$qb = $this->createQueryBuilder('res');
    	$qb->where('res.year = :year')
    		->setParameter('year', $year)
    		->andWhere('res.trimester = :trim')
    		->setParameter('trim', $trimester)
    		->orderBy('res.num', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findByYear($year) {
        $qb = $this->createQueryBuilder('res');
        $qb->where('res.year = :year')
            ->setParameter('year', $year)
            ->addOrderBy('res.trimester', 'DESC')
            ->addOrderBy('res.num', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function listAllByTrimester($year, $trimester) {
    	$qb = $this->createQueryBuilder('res')
    		->Join('res.matchPlayers', 'mpl')
    		->addSelect('mpl');
    	$qb->where('res.year = :year')
    		->setParameter('year', $year)
    		->andWhere('res.trimester = :trim')
    		->setParameter('trim', $trimester)
    		->orderBy('res.num', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function listAllTrimesters() {
        $qb = $this->createQueryBuilder('res')
            ->select('res.year, res.trimester')
            ->distinct()
            ->addOrderBy('res.year', 'DESC')
            ->addOrderBy('res.trimester', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findFollowingGames(Result $match) {
        $year = $match->getYear();
        $trimester = $match->getTrimester();
        $date = $match->getDate();

        $qb = $this->createQueryBuilder('res');
        $qb->where('res.year = :year')
            ->andWhere('res.trimester = :trim')
            ->andWhere('res.date > :date')
            ->setParameter('year', $year)
            ->setParameter('trim', $trimester)
            ->setParameter('date', $date)
            ->orderBy('res.num', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findMatchNumber(Result $match) {

        $year = $match->getYear();
        $trimester = $match->getTrimester();

        $allResults = $this->findByTrimester($year, $trimester);
        $followingGames = $this->findFollowingGames($match);
        $nbAllResults = count($allResults);
        $nbFollowingGames = count($followingGames);

        if ($nbAllResults > 0) {
            if ($nbFollowingGames > 0) {
                foreach ($followingGames as $game) {
                    $num = $game->getNum();
                    $this->updateMatchNumber($game->getId(), $num + 1);
                }
            } else {
                $num = $nbAllResults + 1;
            }
        } else {
            $num = 1;
        }
        return $num;
    }

    public function updateMatchNumbers(Result $match) {

        $year = $match->getYear();
        $trimester = $match->getTrimester();

        $followingGames = $this->findFollowingGames($match);
        $nbFollowingGames = count($followingGames);

        if ($nbFollowingGames > 0) {
            foreach ($followingGames as $game) {
                $num = $game->getNum();
                $this->updateMatchNumber($game->getId(), $num - 1);
            }
        }

        // $results = $this->findByTrimester($year, $trimester);
        // $nbResults = count($results);
        // $i = 0;
        // $num = $match->getNum();
        // $numTmp = $results[$i]->getNum();
        // $isFirstMatch = false;

        // while (($i <= $nbResults - 1) && ($num < $numTmp)) {
        //     // mettre à jour le numéro du match
        //     $this->updateMatchNumber($results[$i]->getId(), $numTmp - 1);
        //     // passage à l'occurence suivante
        //     $i++;
        //     $numTmp = $results[$i]->getNum();
        // }
    }

    public function updateMatchNumber($id, $num) {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->update('foot5x5MainBundle:Result', 'res')
            ->set('res.num', '?1')
            ->where('res.id = ?2')
            ->setParameter(1, $num)
            ->setParameter(2, $id)
            ->getQuery();
        $qb->execute();
    }
}
